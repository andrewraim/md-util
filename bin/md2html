#!/bin/bash

PROG_NAME=$(basename $0)

# Use this path for temp directories.
TMP_BASE=/dev/shm

# This is the location of pandoc template contents.
PANDOC_DIR=$HOME/.local/share/pandoc

print_help() {
cat << EOF
$PROG_NAME

Use Pandoc to render an HTML document from a Markdown file. Includes the
following customizations:
  - Use Pandoc config files from the folder $PANDOC_DIR
  - Enable pandoc-citeproc for citations to references
  - Enable hyperlinking of citations
  - Give the references section a title

Usage: $PROG_NAME [OPTIONS] input

OPTIONS:
  -h     Print this message and exit
  -p     Preview - make temporary output and view with xdg-open
  -q     Quiet - do not echo Pandoc command
EOF
}

QUIET=false

# Get the options
while getopts "hpq" option; do
	case $option in
		h)
			print_help
			exit
			;;
		p)
			TEMPDIR=$(mktemp -d -p $TMP_BASE)
			;;
		q)
			QUIET=true
			;;
	esac
done

# Remaining argument should be the name of the markdown file for input
shift $(($OPTIND - 1))
INPUT=$1
EXT=${INPUT##*.}

if [ -z "$INPUT" ]; then
	echo "No input file was specified"
	exit
fi

# Name the output file
if [ $INPUT != $EXT ]; then
	# Replace extension of input file with "html"
	OUTPUT=${INPUT%$EXT}html
else
	# There was no extension on input file, so add a ".html" to the output
	OUTPUT=${INPUT}.html
fi

## If preview is requested, output should go to a temporary area.
## 1. Grab just the filename part of the path.
## 2. Create a temp folder and append the filename.
if [ -n "$TEMPDIR" ]; then
	BASENAME=$(basename ${OUTPUT})
	OUTPUT="${TEMPDIR}/${BASENAME}"
fi

read -r -d '' CMD << EOM
pandoc $INPUT \
  --data-dir=$PANDOC_DIR \
  --citeproc
  --metadata link-citations=true \
  --metadata reference-section-title=References \
  -f markdown -t html -s -o $OUTPUT
EOM

# Echo the pandoc command unless we're supposed to be quiet
if [ $QUIET == "false" ]; then
	echo $CMD
fi

$CMD

if [ -n "$TEMPDIR" ]; then
	if [ $QUIET == "false" ]; then
		xdg-open $OUTPUT
	else
		xdg-open $OUTPUT > /dev/null 2>&1
	fi

	rm -f $OUTPUT
	rmdir $TEMPDIR
fi

if [ -d "$TEMPDIR" ]; then
	echo "Failed to remove ${TEMPDIR}"
	return 1
fi

